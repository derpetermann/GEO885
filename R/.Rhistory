summarise(total_distance = sum(distance),
total_emission = sum(emissions_kgco2eq),
total_travels_oneway = sum(n_itinerary))
# Join head count data and compute per capita distance
aggregated_division <- staff %>%
group_by(year, division) %>%
summarise(head_count = sum(head_count)) %>%
inner_join(aggregated_division, by = c("year", "division")) %>%
mutate(distance_per_capita = total_distance/head_count)
# Aggregate air travel per reason and year
aggregated_reason <- air_travel %>%
group_by(year, reason) %>%
summarise(total_distance = sum(distance))
# Aggregate air travel per function at Giuz and year
aggregated_giuz_function <- air_travel %>%
group_by(year, giuz_function) %>%
summarise(total_distance = sum(distance))
# Define periods
full_period <- c(2017:2025)
reference_period <- c(2017:2019)
target_period <- c(2019, 2025)
# Define baseline
baseline_distance <- aggregated_giuz %>%
filter(year %in% reference_period) %>%
summarize(mean = mean(total_distance, na.rm=TRUE)) %>%
pull(mean)
baseline_distance_low <- aggregated_giuz %>%
filter(year %in% reference_period) %>%
summarize(min = min(total_distance, na.rm=TRUE)) %>%
pull(min)
baseline_distance_high <- aggregated_giuz %>%
filter(year %in% reference_period) %>%
summarize(max = max(total_distance, na.rm=TRUE)) %>%
pull(max)
# per capita
baseline_distance_per_capita <- aggregated_giuz %>%
filter(year %in% reference_period) %>%
summarize(mean = mean(distance_per_capita, na.rm=TRUE)) %>%
pull(mean)
baseline_distance_low_per_capita <- aggregated_giuz %>%
filter(year %in% reference_period) %>%
summarize(min = min(distance_per_capita, na.rm=TRUE)) %>%
pull(min)
baseline_distance_high_per_capita <- aggregated_giuz %>%
filter(year %in% reference_period) %>%
summarize(max = max(distance_per_capita, na.rm=TRUE)) %>%
pull(max)
# Define reference
reference_distance <- data.frame(x=reference_period,
y=rep(baseline_distance, length(reference_period)))
# per capita
reference_distance_per_capita <- data.frame(x=reference_period,
y=rep(baseline_distance_per_capita,
length(reference_period)))
# Define target
target_distance <- data.frame(x=target_period,
y=c(baseline_distance, baseline_distance * 0.75))
# per capita
target_distance_per_capita <- data.frame(x=target_period,
y=c(baseline_distance_per_capita,
baseline_distance_per_capita * 0.75))
# Maximum total distance per year
max_distance <- max(aggregated_giuz$total_distance)
# per capita
max_distance_per_capita <-max(aggregated_giuz$distance_per_capita)
# Define baseline
baseline_co2 <- aggregated_giuz %>%
filter(year %in% reference_period) %>%
summarize(mean = mean(total_emission, na.rm=TRUE)) %>%
pull(mean)
baseline_co2_low <- aggregated_giuz %>%
filter(year %in% reference_period) %>%
summarize(min = min(total_emission, na.rm=TRUE)) %>%
pull(min)
baseline_co2_high <- aggregated_giuz %>%
filter(year %in% reference_period) %>%
summarize(max = max(total_emission, na.rm=TRUE)) %>%
pull(max)
# UZH: only 2018 and 2019
uzh_baseline_co2 <- aggregated_giuz %>%
filter(year %in% reference_period[-1]) %>%
summarize(mean = mean(total_emission, na.rm=TRUE)) %>%
pull(mean)
# per capita
baseline_co2_per_capita <- aggregated_giuz %>%
filter(year %in% reference_period) %>%
summarize(mean = mean(emission_per_capita, na.rm=TRUE)) %>%
pull(mean)
baseline_co2_low_per_capita <- aggregated_giuz %>%
filter(year %in% reference_period) %>%
summarize(min = min(emission_per_capita, na.rm=TRUE)) %>%
pull(min)
baseline_co2_high_per_capita <- aggregated_giuz %>%
filter(year %in% reference_period) %>%
summarize(max = max(emission_per_capita, na.rm=TRUE)) %>%
pull(max)
# UZH: only 2018 and 2019
uzh_baseline_co2_per_capita <- aggregated_giuz %>%
filter(year %in% reference_period[-1]) %>%
summarize(mean = mean(emission_per_capita, na.rm=TRUE)) %>%
pull(mean)
# Define reference
reference_co2 <- data.frame(x=reference_period,
y=rep(baseline_co2, length(reference_period)))
uzh_reference_co2 <- data.frame(x=reference_period,
y=rep(uzh_baseline_co2, length(reference_period)))
# per capita
reference_co2_per_capita <- data.frame(x=reference_period,
y=rep(baseline_co2_per_capita,
length(reference_period)))
uzh_reference_co2_per_capita <- data.frame(x=reference_period[-1],
y=rep(uzh_baseline_co2_per_capita,
length(reference_period[-1])))
# Define target
target_co2 <- data.frame(x=target_period,
y=c(baseline_co2, baseline_co2 * 0.75))
perc_2025 <- 0.6 - ((0.6 - 0.47) * (2030 - 2025) / (2030 -2022))
uzh_target_co2 <- data.frame(x=target_period,
y=c(uzh_baseline_co2 * 0.60,
uzh_baseline_co2 * perc_2025))
# per capita
target_co2_per_capita <- data.frame(x=target_period,
y=c(baseline_co2_per_capita,
baseline_co2_per_capita * 0.75))
uzh_target_co2_per_capita <- data.frame(x=target_period,
y=c(uzh_baseline_co2_per_capita * 0.60,
uzh_baseline_co2_per_capita * perc_2025))
# Maximum total distance per year
max_co2 <- max(aggregated_giuz$total_emission)
# per capita
max_co2_per_capita <-max(aggregated_giuz$emission_per_capita)
red <- wes_palette("Darjeeling1")[1]
green <- wes_palette("Darjeeling1")[2]
orange <- wes_palette("Darjeeling1")[3]
t_col <- function(color, percent = 50, name = NULL) {
## Get RGB values for named color
rgb.val <- col2rgb(color)
## Make new color using input color as base and alpha set by transparency
t.col <- rgb(rgb.val[1], rgb.val[2], rgb.val[3],
max = 255,
alpha = (100 - percent) * 255 / 100,
names = name)
## Save the color
invisible(t.col)
}
# Total air travel at Giuz
total_distance_plot <- ggplot() +
geom_line(data=reference_distance,
aes(x, y, color="reference",
linetype="reference"),
size=1) +
geom_hline(yintercept=baseline_distance_high,
size=0.5, color="grey", linetype = "dashed") +
geom_hline(yintercept=baseline_distance_low,
size=0.5, color="grey", linetype = "dashed") +
geom_hline(yintercept=baseline_distance,
size=0.5, color="grey") +
geom_line(data=target_distance,
aes(x, y, color="target", linetype="target"),
size=1) +
geom_line(data=aggregated_giuz,
aes(x=year, y=total_distance, color="observed",
linetype="observed"),
size=1) +
geom_line(data=aggregated_giuz,
aes(x=year, y=total_distance_3y_mean,
color="3-year running mean", linetype = "3-year running mean"),
size=1) +
geom_point(data=aggregated_giuz,
aes(x=year, y=total_distance),
color=orange, size=3) +
ylab("km") +
scale_x_continuous(breaks=full_period,
limits=c(min(full_period),
max(full_period))) +
scale_y_continuous(label=comma,
limits=c(0,max_distance*1.02)) +
ggtitle("GIUZ air travel (2017-2020): Flight distance")+
scale_colour_manual("",
breaks = c("reference", "target", "observed",
"3-year running mean"),
values = c("grey", green, orange, orange))+
scale_linetype_manual("", breaks = c("reference", "target", "observed",
"3-year running mean"),
values = c(1,1,1,3)) +
theme_bw() +
theme(text = element_text(size=16),
axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.8, 0.35))
# per capita
distance_per_capita_plot <- ggplot() +
geom_line(data=reference_distance_per_capita,
aes(x, y, color="reference",linetype="reference"),
size=1) +
geom_line(data=target_distance_per_capita,
aes(x, y, color="target",linetype="target"),
size=1) +
geom_hline(yintercept=baseline_distance_high_per_capita,
size=0.5, color="grey", linetype = "dashed") +
geom_hline(yintercept=baseline_distance_low_per_capita,
size=0.5, color="grey", linetype = "dashed") +
geom_hline(yintercept=baseline_distance_per_capita,
size=0.5, color="grey") +
geom_line(data=aggregated_giuz,
aes(x=year, y=distance_per_capita, color="observed", linetype="observed"),
size=1) +
geom_line(data=aggregated_giuz,
aes(x=year, y=distance_per_capita_3y_mean, color="3-year running mean",
linetype = "3-year running mean"), size=1) +
geom_point(data=aggregated_giuz,
aes(x=year, y=distance_per_capita),
color=orange, size=3) +
ylab("km per capita") +
scale_x_continuous(breaks=full_period,
limits=c(min(full_period),
max(full_period))) +
scale_y_continuous(label=comma,
limits=c(0,
max_distance_per_capita*1.02)) +
scale_colour_manual("", breaks = c("reference", "target", "observed",
"3-year running mean"),
values = c("grey", green, orange, orange))+
scale_linetype_manual("", breaks = c("reference", "target", "observed",
"3-year running mean"),
values = c(1, 1, 1, 3))+
theme_bw() +
theme(text = element_text(size=16),
axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.8, 0.35))
gA <- ggplotGrob(total_distance_plot)
gB <- ggplotGrob(distance_per_capita_plot)
g <- grid::grid.newpage()
g <- rbind(gA, gB)
ggsave(file="flight_distance.png", g,
width = 10,
height= 7)
grid.draw(g)
# Total air travel at Giuz
total_co2_plot <- ggplot() +
geom_line(data=reference_co2,
aes(x, y, color="target GIUZ"), size=1) +
geom_line(data=uzh_reference_co2,  aes(x, y, color="target UZH"), size=1) +
geom_hline(yintercept=baseline_co2_high,
size=0.5, color="grey", linetype = "dashed") +
geom_hline(yintercept=baseline_co2_low,
size=0.5, color="grey", linetype = "dashed") +
geom_line(data=target_co2,
aes(x, y, color="target GIUZ"), linetype="dashed",
size=1) +
geom_line(data=uzh_target_co2,
aes(x, y, color="target UZH"), linetype="dashed",
size=1) +
geom_line(data=aggregated_giuz,
aes(x=year, y=total_emission, color="observed"),
size=1) +
geom_point(data=aggregated_giuz,
aes(x=year, y=total_emission),
color=orange, size=3) +
ylab("kg CO2 eq.") +
scale_x_continuous(breaks=full_period,
limits=c(min(full_period),
max(full_period))) +
scale_y_continuous(label=comma,
limits=c(0,max_co2*1.02)) +
ggtitle("GIUZ air travel (2017-2020): emissions")+
scale_colour_manual("",
breaks = c("observed", "target GIUZ","target UZH"),
values = c( orange, green, red))+
theme_bw() +
theme(text = element_text(size=16),
axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.8, 0.35))
co2_per_capita_plot <- ggplot() +
geom_line(data=reference_co2_per_capita,
aes(x, y, color="target GIUZ"), size=1) +
geom_line(data=uzh_reference_co2_per_capita,
aes(x, y, color="target UZH"), size=1) +
geom_hline(yintercept=baseline_co2_high_per_capita,
size=0.5, color="grey", linetype = "dashed") +
geom_hline(yintercept=baseline_co2_low_per_capita,
size=0.5, color="grey", linetype = "dashed") +
geom_line(data=target_co2_per_capita,
aes(x, y, color="target GIUZ"), linetype="dashed",
size=1) +
geom_line(data=uzh_target_co2_per_capita,
aes(x, y, color="target UZH"), linetype="dashed",
size=1) +
geom_line(data=aggregated_giuz,
aes(x=year, y=emission_per_capita, color="observed"),
size=1) +
geom_point(data=aggregated_giuz,
aes(x=year, y=emission_per_capita),
color=orange, size=3) +
ylab("kg CO2 eq. per capita") +
scale_x_continuous(breaks=full_period,
limits=c(min(full_period),
max(full_period))) +
scale_y_continuous(label=comma,
limits=c(0,max_co2_per_capita*1.02)) +
ggtitle("GIUZ air travel (2017-2020): emissions")+
scale_colour_manual("",
breaks = c("observed", "target GIUZ","target UZH"),
values = c( orange, green, red))+
theme_bw() +
theme(text = element_text(size=16),
axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.8, 0.25))
ggsave(file="total_co2_plot.png", total_co2_plot,
width = 10,
height= 5)
ggsave(file="co2_per_capita_plot.png", co2_per_capita_plot,
width = 10,
height= 5)
gA <- ggplotGrob(total_co2_plot)
gB <- ggplotGrob(co2_per_capita_plot)
g <- grid::grid.newpage()
g <- rbind(gA, gB)
ggsave(file="flight_emission.png", g,
width = 10,
height= 7)
grid.draw(g)
blue <- wes_palette("Darjeeling1")[5]
dark_orange <- wes_palette("Darjeeling1")[4]
black <- wes_palette("Darjeeling2")[5]
reasons_plot <- ggplot(aggregated_reason,
aes(fill=reason, y=total_distance, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values=c(blue, dark_orange, green, black, orange, red),
name = "Reason for travel") +
ggtitle("Reasons for air travel at GIUZ (2017-2020)") +
xlab("") +
ylab("km") +
scale_y_continuous(label=comma,
limits=c(0,max_distance*1.02)) +
theme_bw() +
theme(legend.position = c(0.86, 0.7))
reasons_plot
ggsave("reasons_plot.png", reasons_plot, width=7, height=5)
giuz_function_plot <- ggplot(aggregated_giuz_function, aes(fill=giuz_function,
y=total_distance, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values=c(green, red, blue, orange, black),
name="Function at GIUZ") +
ggtitle("Function of air travellers at GIUZ (2017-2020)") +
xlab("") +
ylab("km") +
scale_y_continuous(label=comma,
limits=c(0,max_distance*1.02)) +
theme_bw() +
theme(legend.position = c(0.86, 0.7))
ggsave("giuz_function_plot.png", giuz_function_plot, width = 7, height=5)
# Air travel by Giuz division
division_plot <- ggplot() +
geom_line(data=reference_distance_per_capita, aes(x, y),
color="grey", size=3, alpha=0.4) +
geom_line(data=target_distance_per_capita, aes(x, y),
color=green, size=3, alpha=0.4) +
geom_line(data=aggregated_division,
aes(x=year, y=distance_per_capita, color=division),
size=1) +
annotate("text", x = 2023, y = 6000, label="target", color=green)+
ylab("km per capita") +
scale_x_continuous(breaks=full_period,
limits=c(min(full_period),
max(full_period))) +
scale_y_continuous(label=comma,
limits=c(0,
max_distance_per_capita*1.6)) +
scale_color_manual(values=c(red, blue, black, orange),
name="Division")+
theme_bw() +
theme(text = element_text(size=16),
axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.8, 0.75))
ggsave("division_plot.png", division_plot, width = 10, height=7)
division_plot
# Air travel with more than 10,000 km (per itinerary)
ultra_long_distance_threshold <- 10000
# Air travel to locations which can be reached by train from Zurich
# (within 1,000 km per itinerary and either departure or arrival airport is Zurich)
train_threshold <- 1000
air_travel_scenarios <- air_travel %>%
mutate(distance_per_itinerary = distance/n_itinerary) %>%
# Is the flight an ultra-long flight?
mutate(ultra_long_distance =
if_else(distance_per_itinerary >= ultra_long_distance_threshold, 1, 0)) %>%
# Is the destination reachable by train from Zurich
mutate(train_reachable = if_else(
(distance_per_itinerary <= train_threshold) &
(departure_airport == "ZRH" | arrival_airport == "ZRH"), 1, 0)) %>%
# Does a Giuz employee traveler travel to a conference?
mutate(giuz_employee_at_conference = if_else(
(giuz_function != "guest") & (reason == "conference, workshop"), 1, 0)) %>%
# Is this conference in Europe?
mutate(giuz_employee_at_european_conference = if_else(
giuz_employee_at_conference & departure_continent == "EU" &
arrival_continent == "EU", 1, 0))
total_head_count <- staff %>%
filter (year %in% c(2017, 2018, 2019))%>%
summarise(head_count = sum(head_count)) %>%
pull(head_count)
# Compute the mean and the standard error of ultra-long flights
ultra_long_flights <- air_travel_scenarios %>%
filter(year %in% c(2017, 2018, 2019) & ultra_long_distance) %>%
uncount(n_itinerary) %>%
summarise(mean_distance=mean(distance_per_itinerary),
sd_distance=sd(distance_per_itinerary),
n_itinerary=n(),
se_distance=sd_distance / sqrt(n_itinerary))
# Compute the mean and the standard error of all other flights
regular_flights <- air_travel_scenarios %>%
filter(year %in% c(2017, 2018, 2019) & !ultra_long_distance) %>%
uncount(n_itinerary) %>%
summarise(mean_distance=mean(distance_per_itinerary),
sd_distance=sd(distance_per_itinerary),
n_itinerary=n(),
se_distance=sd_distance / sqrt(n_itinerary))
# Normalize per capita
ultra_long_flights_per_capita <- ultra_long_flights %>%
mutate(mean_ultra_long=(mean_distance * n_itinerary)/total_head_count,
se_ultra_long=(se_distance * n_itinerary) / total_head_count,
n_ultra_long = n_itinerary) %>%
select(mean_ultra_long, se_ultra_long, n_ultra_long)
regular_flights_per_capita <- regular_flights %>%
mutate(mean_regular=(mean_distance * n_itinerary)/total_head_count,
se_regular = (se_distance * n_itinerary) / total_head_count,
n_regular = n_itinerary) %>%
select(mean_regular, se_regular, n_regular)
# Propose scenarios
no_ultras_scenario <- data.frame(percentage=seq(from = 0.0, to = 1, by = 0.1)) %>%
left_join(regular_flights_per_capita, by=character()) %>%
left_join(ultra_long_flights_per_capita, by=character()) %>%
mutate(distance_per_capita = mean_regular + mean_ultra_long * percentage,
se = (se_regular + se_ultra_long * percentage),
reduction = rev(percentage))
label <- paste0("GIUZ reduction target")
label_y <- target_distance_per_capita$y[2] - 500
no_ultras_plot <- ggplot(no_ultras_scenario) +
geom_ribbon(aes(x = reduction,
y = distance_per_capita,
ymin = distance_per_capita - se,
ymax = distance_per_capita + se),
fill = t_col(orange, 80)) +
geom_line(aes(x=reduction, y=distance_per_capita),
color = orange, size=1) +
geom_hline(yintercept=target_distance_per_capita$y[2],
size=1, color=green, linetype = "dashed") +
annotate("text", x = 0.15, y = label_y, label=label, color=green, size=6) +
scale_y_continuous(label=comma,
limits=c(0, max_distance_per_capita*1.02)) +
scale_x_continuous(expand = expand_scale(),
limits = c(0,1.00),
label=scales::percent) +
xlab("avoid ultra-long flights (> 10,000 km)") +
ylab("km per capita (projected)") +
theme_bw() +
theme(text = element_text(size=20),
axis.text.x = element_text(hjust = 0.9),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.8, 0.35))
ggsave("no_ultra_long_flights.png", no_ultras_plot, width = 10, height=7)
# Compute the mean and the standard error of flights to train-reachable destinations
train_reachable_flights <- air_travel_scenarios %>%
filter(year %in% c(2017, 2018, 2019) & train_reachable) %>%
uncount(n_itinerary) %>%
summarise(mean_distance=mean(distance_per_itinerary),
sd_distance=sd(distance_per_itinerary),
n_itinerary=n(),
se_distance=sd_distance / sqrt(n_itinerary))
# Compute the mean and the standard error of flights to non train-reachable destinations
non_train_reachable_flights <- air_travel_scenarios %>%
filter(year %in% c(2017, 2018, 2019) & !train_reachable) %>%
uncount(n_itinerary) %>%
summarise(mean_distance=mean(distance_per_itinerary),
sd_distance=sd(distance_per_itinerary),
n_itinerary=n(),
se_distance=sd_distance / sqrt(n_itinerary))
train_reachable_flights_per_capita <- train_reachable_flights %>%
mutate(mean_train_reachable=(mean_distance * n_itinerary)/total_head_count,
se_train_reachable=(se_distance * n_itinerary) / total_head_count,
n_train_reachable = n_itinerary) %>%
select(mean_train_reachable, se_train_reachable, n_train_reachable)
non_train_reachable_flights_per_capita <- non_train_reachable_flights %>%
mutate(mean_non_train_reachable=(mean_distance * n_itinerary)/total_head_count,
se_non_train_reachable=(se_distance * n_itinerary) / total_head_count,
n_non_train_reachable = n_itinerary) %>%
select(mean_non_train_reachable, se_non_train_reachable, n_non_train_reachable)
# Compute the mean and the standard error of flights to conferences in Europe (for Giuz employees only)
european_conference_flights <- air_travel_scenarios %>%
filter(year %in% c(2017, 2018, 2019) & giuz_employee_at_european_conference) %>%
uncount(n_itinerary) %>%
summarise(mean_distance=mean(distance_per_itinerary),
sd_distance=sd(distance_per_itinerary),
n_itinerary=n(),
se_distance=sd_distance / sqrt(n_itinerary))
