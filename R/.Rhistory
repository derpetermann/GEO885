aes(x, y, color="target GIUZ"), linetype="dashed",
size=1) +
geom_line(data=uzh_target_co2,
aes(x, y, color="target UZH"), linetype="dashed",
size=1) +
geom_line(data=aggregated_giuz,
aes(x=year, y=total_emission, color="observed"),
size=1) +
geom_point(data=aggregated_giuz,
aes(x=year, y=total_emission),
color=orange, size=3) +
ylab("kg CO2 eq.") +
scale_x_continuous(breaks=full_period,
limits=c(min(full_period),
max(full_period))) +
scale_y_continuous(label=comma,
limits=c(0,max_co2*1.02)) +
ggtitle("GIUZ air travel (2017-2020): emissions")+
scale_colour_manual("",
breaks = c("observed", "target GIUZ","target UZH"),
values = c( orange, green, red))+
theme_bw() +
theme(text = element_text(size=16),
axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.8, 0.35))
co2_per_capita_plot <- ggplot() +
geom_line(data=reference_co2_per_capita,
aes(x, y, color="target GIUZ"), size=1) +
geom_line(data=uzh_reference_co2_per_capita,
aes(x, y, color="target UZH"), size=1) +
geom_hline(yintercept=baseline_co2_high_per_capita,
size=0.5, color="grey", linetype = "dashed") +
geom_hline(yintercept=baseline_co2_low_per_capita,
size=0.5, color="grey", linetype = "dashed") +
geom_line(data=target_co2_per_capita,
aes(x, y, color="target GIUZ"), linetype="dashed",
size=1) +
geom_line(data=uzh_target_co2_per_capita,
aes(x, y, color="target UZH"), linetype="dashed",
size=1) +
geom_line(data=aggregated_giuz,
aes(x=year, y=emission_per_capita, color="observed"),
size=1) +
geom_point(data=aggregated_giuz,
aes(x=year, y=emission_per_capita),
color=orange, size=3) +
ylab("kg CO2 eq. per capita") +
scale_x_continuous(breaks=full_period,
limits=c(min(full_period),
max(full_period))) +
scale_y_continuous(label=comma,
limits=c(0,max_co2_per_capita*1.02)) +
ggtitle("GIUZ air travel (2017-2020): emissions")+
scale_colour_manual("",
breaks = c("observed", "target GIUZ","target UZH"),
values = c( orange, green, red))+
theme_bw() +
theme(text = element_text(size=16),
axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.8, 0.25))
ggsave(file="total_co2_plot.png", total_co2_plot,
width = 10,
height= 5)
ggsave(file="co2_per_capita_plot.png", co2_per_capita_plot,
width = 10,
height= 5)
gA <- ggplotGrob(total_co2_plot)
gB <- ggplotGrob(co2_per_capita_plot)
g <- grid::grid.newpage()
g <- rbind(gA, gB)
ggsave(file="flight_emission.png", g,
width = 10,
height= 7)
grid.draw(g)
blue <- wes_palette("Darjeeling1")[5]
dark_orange <- wes_palette("Darjeeling1")[4]
black <- wes_palette("Darjeeling2")[5]
reasons_plot <- ggplot(aggregated_reason,
aes(fill=reason, y=total_distance, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values=c(blue, dark_orange, green, black, orange, red),
name = "Reason for travel") +
ggtitle("Reasons for air travel at GIUZ (2017-2020)") +
xlab("") +
ylab("km") +
scale_y_continuous(label=comma,
limits=c(0,max_distance*1.02)) +
theme_bw() +
theme(legend.position = c(0.86, 0.7))
reasons_plot
ggsave("reasons_plot.png", reasons_plot, width=7, height=5)
giuz_function_plot <- ggplot(aggregated_giuz_function, aes(fill=giuz_function,
y=total_distance, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values=c(green, red, blue, orange, black),
name="Function at GIUZ") +
ggtitle("Function of air travellers at GIUZ (2017-2020)") +
xlab("") +
ylab("km") +
scale_y_continuous(label=comma,
limits=c(0,max_distance*1.02)) +
theme_bw() +
theme(legend.position = c(0.86, 0.7))
ggsave("giuz_function_plot.png", giuz_function_plot, width = 7, height=5)
# Air travel by Giuz division
division_plot <- ggplot() +
geom_line(data=reference_distance_per_capita, aes(x, y),
color="grey", size=3, alpha=0.4) +
geom_line(data=target_distance_per_capita, aes(x, y),
color=green, size=3, alpha=0.4) +
geom_line(data=aggregated_division,
aes(x=year, y=distance_per_capita, color=division),
size=1) +
annotate("text", x = 2023, y = 6000, label="target", color=green)+
ylab("km per capita") +
scale_x_continuous(breaks=full_period,
limits=c(min(full_period),
max(full_period))) +
scale_y_continuous(label=comma,
limits=c(0,
max_distance_per_capita*1.6)) +
scale_color_manual(values=c(red, blue, black, orange),
name="Division")+
theme_bw() +
theme(text = element_text(size=16),
axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.8, 0.75))
ggsave("division_plot.png", division_plot, width = 10, height=7)
division_plot
# Air travel with more than 10,000 km (per itinerary)
ultra_long_distance_threshold <- 10000
# Air travel to locations which can be reached by train from Zurich
# (within 1,000 km per itinerary and either departure or arrival airport is Zurich)
train_threshold <- 1000
air_travel_scenarios <- air_travel %>%
mutate(distance_per_itinerary = distance/n_itinerary) %>%
# Is the flight an ultra-long flight?
mutate(ultra_long_distance =
if_else(distance_per_itinerary >= ultra_long_distance_threshold, 1, 0)) %>%
# Is the destination reachable by train from Zurich
mutate(train_reachable = if_else(
(distance_per_itinerary <= train_threshold) &
(departure_airport == "ZRH" | arrival_airport == "ZRH"), 1, 0)) %>%
# Does a Giuz employee traveler travel to a conference?
mutate(giuz_employee_at_conference = if_else(
(giuz_function != "guest") & (reason == "conference, workshop"), 1, 0)) %>%
# Is this conference in Europe?
mutate(giuz_employee_at_european_conference = if_else(
giuz_employee_at_conference & departure_continent == "EU" &
arrival_continent == "EU", 1, 0))
total_head_count <- staff %>%
filter (year %in% c(2017, 2018, 2019))%>%
summarise(head_count = sum(head_count)) %>%
pull(head_count)
# Compute the mean and the standard error of ultra-long flights
ultra_long_flights <- air_travel_scenarios %>%
filter(year %in% c(2017, 2018, 2019) & ultra_long_distance) %>%
uncount(n_itinerary) %>%
summarise(mean_distance=mean(distance_per_itinerary),
sd_distance=sd(distance_per_itinerary),
n_itinerary=n(),
se_distance=sd_distance / sqrt(n_itinerary))
# Compute the mean and the standard error of all other flights
regular_flights <- air_travel_scenarios %>%
filter(year %in% c(2017, 2018, 2019) & !ultra_long_distance) %>%
uncount(n_itinerary) %>%
summarise(mean_distance=mean(distance_per_itinerary),
sd_distance=sd(distance_per_itinerary),
n_itinerary=n(),
se_distance=sd_distance / sqrt(n_itinerary))
# Normalize per capita
ultra_long_flights_per_capita <- ultra_long_flights %>%
mutate(mean_ultra_long=(mean_distance * n_itinerary)/total_head_count,
se_ultra_long=(se_distance * n_itinerary) / total_head_count,
n_ultra_long = n_itinerary) %>%
select(mean_ultra_long, se_ultra_long, n_ultra_long)
regular_flights_per_capita <- regular_flights %>%
mutate(mean_regular=(mean_distance * n_itinerary)/total_head_count,
se_regular = (se_distance * n_itinerary) / total_head_count,
n_regular = n_itinerary) %>%
select(mean_regular, se_regular, n_regular)
# Propose scenarios
no_ultras_scenario <- data.frame(percentage=seq(from = 0.0, to = 1, by = 0.1)) %>%
left_join(regular_flights_per_capita, by=character()) %>%
left_join(ultra_long_flights_per_capita, by=character()) %>%
mutate(distance_per_capita = mean_regular + mean_ultra_long * percentage,
se = (se_regular + se_ultra_long * percentage),
reduction = rev(percentage))
label <- paste0("GIUZ reduction target")
label_y <- target_distance_per_capita$y[2] - 500
no_ultras_plot <- ggplot(no_ultras_scenario) +
geom_ribbon(aes(x = reduction,
y = distance_per_capita,
ymin = distance_per_capita - se,
ymax = distance_per_capita + se),
fill = t_col(orange, 80)) +
geom_line(aes(x=reduction, y=distance_per_capita),
color = orange, size=1) +
geom_hline(yintercept=target_distance_per_capita$y[2],
size=1, color=green, linetype = "dashed") +
annotate("text", x = 0.15, y = label_y, label=label, color=green, size=6) +
scale_y_continuous(label=comma,
limits=c(0, max_distance_per_capita*1.02)) +
scale_x_continuous(expand = expand_scale(),
limits = c(0,1.00),
label=scales::percent) +
xlab("avoid ultra-long flights (> 10,000 km)") +
ylab("km per capita (projected)") +
theme_bw() +
theme(text = element_text(size=20),
axis.text.x = element_text(hjust = 0.9),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.8, 0.35))
ggsave("no_ultra_long_flights.png", no_ultras_plot, width = 10, height=7)
# Compute the mean and the standard error of flights to train-reachable destinations
train_reachable_flights <- air_travel_scenarios %>%
filter(year %in% c(2017, 2018, 2019) & train_reachable) %>%
uncount(n_itinerary) %>%
summarise(mean_distance=mean(distance_per_itinerary),
sd_distance=sd(distance_per_itinerary),
n_itinerary=n(),
se_distance=sd_distance / sqrt(n_itinerary))
# Compute the mean and the standard error of flights to non train-reachable destinations
non_train_reachable_flights <- air_travel_scenarios %>%
filter(year %in% c(2017, 2018, 2019) & !train_reachable) %>%
uncount(n_itinerary) %>%
summarise(mean_distance=mean(distance_per_itinerary),
sd_distance=sd(distance_per_itinerary),
n_itinerary=n(),
se_distance=sd_distance / sqrt(n_itinerary))
train_reachable_flights_per_capita <- train_reachable_flights %>%
mutate(mean_train_reachable=(mean_distance * n_itinerary)/total_head_count,
se_train_reachable=(se_distance * n_itinerary) / total_head_count,
n_train_reachable = n_itinerary) %>%
select(mean_train_reachable, se_train_reachable, n_train_reachable)
non_train_reachable_flights_per_capita <- non_train_reachable_flights %>%
mutate(mean_non_train_reachable=(mean_distance * n_itinerary)/total_head_count,
se_non_train_reachable=(se_distance * n_itinerary) / total_head_count,
n_non_train_reachable = n_itinerary) %>%
select(mean_non_train_reachable, se_non_train_reachable, n_non_train_reachable)
# Compute the mean and the standard error of flights to conferences in Europe (for Giuz employees only)
european_conference_flights <- air_travel_scenarios %>%
filter(year %in% c(2017, 2018, 2019) & giuz_employee_at_european_conference) %>%
uncount(n_itinerary) %>%
summarise(mean_distance=mean(distance_per_itinerary),
sd_distance=sd(distance_per_itinerary),
n_itinerary=n(),
se_distance=sd_distance / sqrt(n_itinerary))
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
airports <- read.csv("~/Desktop/UZH/MSc Geographie/2. Semester/GEO885 - GIS Science Project/GEO885/Data and Code/GIUZ_AirTravel_20210509/airports.csv")
amm <- read.csv("~/Desktop/UZH/MSc Geographie/2. Semester/GEO885 - GIS Science Project/GEO885/Data and Code/GIUZ_AirTravel_20210509/AIRTRAVELS.csv")
world <- st_read("/Users/chaualala/Desktop/UZH/MSc Geographie/2. Semester/GEO885 - GIS Science Project/GEO885/Data and Code/TM_WORLD_BORDERS_SIMPL-0 Kopie")
airports <- airports %>% dplyr::select(-c(continent, home_link, wikipedia_link, elevation_ft, municipality, scheduled_service, type, keywords, name, ident, iso_region, gps_code,local_code))
airports <- subset(airports, iata_code != "")
airports <- airports %>% st_as_sf(coords = c("longitude_deg", "latitude_deg"), crs = 4326) %>% rename(coordinates = geometry)
amm_arr <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm_arr <- amm_arr %>% rename(arr_coordinates = coordinates,
dep_country = iso_country)
amm <- amm %>% subset(DIVISION != "Support&Mangement")
amm <- left_join(amm,airports, by = c("DEPARTURE_AIRPORT" = "iata_code"))
amm <- amm %>% rename(dep_coordinates = coordinates,
dep_country = iso_country)
amm <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm <- amm %>% rename(arr_coordinates = coordinates,
arr_country = iso_country)
ggplot() +
geom_sf(data=world, lwd = .5)+
geom_sf(data = amm, aes(geometry = dep_coordinates, col = "dep_coordinates")) +
geom_sf(data = amm, aes(geometry = arr_coordinates, col = "arr_coordinates")) +
labs(fill = "Flight type") +
theme(panel.grid.minor = element_blank())+
ggtitle("Departure and arrival locations for all GIUZ flights separated by symbols")+
xlab("Longitude") + ylab("Latitude")
amm_arr <- st_as_sf(amm_arr)
flightmap <- st_join(world, amm_arr, join = st_contains_properly, left=TRUE)
flightmap_sort <- flightmap %>% group_by(NAME) %>% count()
sf::sf_use_s2(FALSE)
amm_arr <- st_as_sf(amm_arr)
flightmap <- st_join(world, amm_arr, join = st_contains_properly, left=TRUE)
flightmap_sort <- flightmap %>% group_by(NAME) %>% count()
flightmap_sort
# create map
ggplot() +
geom_sf(data=world)+
geom_sf(data = flightmap_sort, aes(fill = n)) +
labs(fill = "Locations per country") +
scico::scale_fill_scico(palette = "bilbao")+
theme(panel.grid.minor = element_blank())+
ggtitle("Arrival locations for all GIUZ flights counnted by country")+
xlab("Longitude") + ylab("Latitude")+
theme(legend.position = "none")
flightpath <- cbind(amm$DEPARTURE_AIRPORT,
amm$ARRIVAL_AIRPORT) %>% as.data.frame()
flightpath <- flightpath %>% rename(Departure = V1,
Arrival = V2)
flightpath <- subset(flightpath, Departure != "" & Arrival != "")
plot_flights(flightpath)
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
airports <- read.csv("~/Desktop/UZH/MSc Geographie/2. Semester/GEO885 - GIS Science Project/GEO885/Data and Code/GIUZ_AirTravel_20210509/airports.csv")
amm <- read.csv("~/Desktop/UZH/MSc Geographie/2. Semester/GEO885 - GIS Science Project/GEO885/Data and Code/GIUZ_AirTravel_20210509/AIRTRAVELS.csv")
world <- st_read("/Users/chaualala/Desktop/UZH/MSc Geographie/2. Semester/GEO885 - GIS Science Project/GEO885/Data and Code/TM_WORLD_BORDERS_SIMPL-0 Kopie")
airports <- airports %>% dplyr::select(-c(continent, home_link, wikipedia_link, elevation_ft, municipality, scheduled_service, type, keywords, name, ident, iso_region, gps_code,local_code))
airports <- subset(airports, iata_code != "")
airports <- airports %>% st_as_sf(coords = c("longitude_deg", "latitude_deg"), crs = 4326) %>% rename(coordinates = geometry)
amm_arr <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm_arr <- amm_arr %>% rename(arr_coordinates = coordinates,
dep_country = iso_country)
amm <- amm %>% subset(DIVISION != "Support&Mangement")
amm <- left_join(amm,airports, by = c("DEPARTURE_AIRPORT" = "iata_code"))
amm <- amm %>% rename(dep_coordinates = coordinates,
dep_country = iso_country)
amm <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm <- amm %>% rename(arr_coordinates = coordinates,
arr_country = iso_country)
ggplot() +
geom_sf(data=world, lwd = .5)+
geom_sf(data = amm, aes(geometry = dep_coordinates, col = "dep_coordinates")) +
geom_sf(data = amm, aes(geometry = arr_coordinates, col = "arr_coordinates")) +
labs(fill = "Flight type") +
theme(panel.grid.minor = element_blank())+
ggtitle("Departure and arrival locations for all GIUZ flights separated by symbols")+
xlab("Longitude") + ylab("Latitude")
amm_arr <- st_as_sf(amm_arr)
flightmap <- st_join(world, amm_arr, join = st_contains_properly, left=TRUE)
flightmap_sort <- flightmap %>% group_by(NAME) %>% count()
sf::sf_use_s2(FALSE)
amm_arr <- st_as_sf(amm_arr)
flightmap <- st_join(world, amm_arr, join = st_contains_properly, left=TRUE)
flightmap_sort <- flightmap %>% group_by(NAME) %>% count()
flightmap_sort
# create map
ggplot() +
geom_sf(data=world)+
geom_sf(data = flightmap_sort, aes(fill = n)) +
labs(fill = "Locations per country") +
scico::scale_fill_scico(palette = "bilbao")+
theme(panel.grid.minor = element_blank())+
ggtitle("Arrival locations for all GIUZ flights counnted by country")+
xlab("Longitude") + ylab("Latitude")+
theme(legend.position = "none")
View(air_travel)
flightpath <- cbind(amm$DEPARTURE_AIRPORT,
amm$ARRIVAL_AIRPORT) %>% as.data.frame()
flightpath <- flightpath %>% rename(Departure = V1,
Arrival = V2)
flightpath <- subset(flightpath, Departure != "" & Arrival != "")
plot_flights(flightpath)
View(flightpath)
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
airports <- read.csv("~/Desktop/UZH/MSc Geographie/2. Semester/GEO885 - GIS Science Project/GEO885/Data and Code/GIUZ_AirTravel_20210509/airports.csv")
amm <- read.csv("~/Desktop/UZH/MSc Geographie/2. Semester/GEO885 - GIS Science Project/GEO885/Data and Code/GIUZ_AirTravel_20210509/AIRTRAVELS.csv")
world <- st_read("/Users/chaualala/Desktop/UZH/MSc Geographie/2. Semester/GEO885 - GIS Science Project/GEO885/Data and Code/TM_WORLD_BORDERS_SIMPL-0 Kopie")
airports <- airports %>% dplyr::select(-c(continent, home_link, wikipedia_link, elevation_ft, municipality, scheduled_service, type, keywords, name, ident, iso_region, gps_code,local_code))
airports <- subset(airports, iata_code != "")
airports <- airports %>% st_as_sf(coords = c("longitude_deg", "latitude_deg"), crs = 4326) %>% rename(coordinates = geometry)
amm_arr <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm_arr <- amm_arr %>% rename(arr_coordinates = coordinates,
dep_country = iso_country)
amm <- amm %>% subset(DIVISION != "Support&Mangement")
amm <- left_join(amm,airports, by = c("DEPARTURE_AIRPORT" = "iata_code"))
amm <- amm %>% rename(dep_coordinates = coordinates,
dep_country = iso_country)
amm <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm <- amm %>% rename(arr_coordinates = coordinates,
arr_country = iso_country)
ggplot() +
geom_sf(data=world, lwd = .5)+
geom_sf(data = amm, aes(geometry = dep_coordinates, col = "dep_coordinates")) +
geom_sf(data = amm, aes(geometry = arr_coordinates, col = "arr_coordinates")) +
labs(fill = "Flight type") +
theme(panel.grid.minor = element_blank())+
ggtitle("Departure and arrival locations for all GIUZ flights separated by symbols")+
xlab("Longitude") + ylab("Latitude")
amm_arr <- st_as_sf(amm_arr)
flightmap <- st_join(world, amm_arr, join = st_contains_properly, left=TRUE)
flightmap_sort <- flightmap %>% group_by(NAME) %>% count()
flightmap_sort
# create map
ggplot() +
geom_sf(data=world)+
geom_sf(data = flightmap_sort, aes(fill = n)) +
labs(fill = "Locations per country") +
scico::scale_fill_scico(palette = "bilbao")+
theme(panel.grid.minor = element_blank())+
ggtitle("Arrival locations for all GIUZ flights counnted by country")+
xlab("Longitude") + ylab("Latitude")+
theme(legend.position = "none")
flightpath <- cbind(amm$DEPARTURE_AIRPORT,
amm$ARRIVAL_AIRPORT) %>% as.data.frame()
flightpath <- flightpath %>% rename(Departure = V1,
Arrival = V2)
flightpath <- subset(flightpath, Departure != "" & Arrival != "")
plot_flights(flightpath)
View(amm)
head(amm)
amm <- amm %>% rename(1 = "One-way",
amm <- amm %>% rename(1 = One-way,
amm <- amm %>% rename("1" = "One-way",
"2" = "Hin- und R\xfcckflug")
with(amm, factor(JOURNEY_TYPE,
levels = c("Hin- und R\xfcckflug", "One-way"), labels = c(2, 1)))
amm <- with(amm, factor(JOURNEY_TYPE,
levels = c("Hin- und R\xfcckflug", "One-way"), labels = c(2, 1)))
amm <- mutate(with(amm, factor(JOURNEY_TYPE,
levels = c("Hin- und R\xfcckflug", "One-way"), labels = c(2, 1))))
average_co2_17_20 <- amm %>% group_by(year) %>% mean()
average_co2_17_20 <- amm %>% group_by(year) %>% unfactor(mean())
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(LANG = "en")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(flightplot)
library(sf)
library(shiny)
library(geosphere)
airports <- read.csv("~/Desktop/UZH/MSc Geographie/2. Semester/GEO885 - GIS Science Project/GEO885/Data and Code/GIUZ_AirTravel_20210509/airports.csv")
amm <- read.csv("~/Desktop/UZH/MSc Geographie/2. Semester/GEO885 - GIS Science Project/GEO885/Data and Code/GIUZ_AirTravel_20210509/AIRTRAVELS.csv")
world <- st_read("/Users/chaualala/Desktop/UZH/MSc Geographie/2. Semester/GEO885 - GIS Science Project/GEO885/Data and Code/TM_WORLD_BORDERS_SIMPL-0 Kopie")
airports <- airports %>% dplyr::select(-c(continent, home_link, wikipedia_link, elevation_ft, municipality, scheduled_service, type, keywords, name, ident, iso_region, gps_code,local_code))
airports <- subset(airports, iata_code != "")
airports <- airports %>% st_as_sf(coords = c("longitude_deg", "latitude_deg"), crs = 4326) %>% rename(coordinates = geometry)
amm_arr <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm_arr <- amm_arr %>% rename(arr_coordinates = coordinates,
dep_country = iso_country)
amm <- amm %>% subset(DIVISION != "Support&Mangement")
amm <- left_join(amm,airports, by = c("DEPARTURE_AIRPORT" = "iata_code"))
amm <- amm %>% rename(dep_coordinates = coordinates,
dep_country = iso_country)
amm <- left_join(amm,airports, by = c("ARRIVAL_AIRPORT" = "iata_code"))
amm <- amm %>% rename(arr_coordinates = coordinates,
arr_country = iso_country)
ggplot() +
geom_sf(data=world, lwd = .5)+
geom_sf(data = amm, aes(geometry = dep_coordinates, col = "dep_coordinates")) +
geom_sf(data = amm, aes(geometry = arr_coordinates, col = "arr_coordinates")) +
labs(fill = "Flight type") +
theme(panel.grid.minor = element_blank())+
ggtitle("Departure and arrival locations for all GIUZ flights separated by symbols")+
xlab("Longitude") + ylab("Latitude")
amm_arr <- st_as_sf(amm_arr)
flightmap <- st_join(world, amm_arr, join = st_contains_properly, left=TRUE)
flightmap_sort <- flightmap %>% group_by(NAME) %>% count()
flightmap_sort
# create map
ggplot() +
geom_sf(data=world)+
geom_sf(data = flightmap_sort, aes(fill = n)) +
labs(fill = "Locations per country") +
scico::scale_fill_scico(palette = "bilbao")+
theme(panel.grid.minor = element_blank())+
ggtitle("Arrival locations for all GIUZ flights counnted by country")+
xlab("Longitude") + ylab("Latitude")+
theme(legend.position = "none")
flightpath <- cbind(amm$DEPARTURE_AIRPORT,
amm$ARRIVAL_AIRPORT) %>% as.data.frame()
flightpath <- flightpath %>% rename(Departure = V1,
Arrival = V2)
flightpath <- subset(flightpath, Departure != "" & Arrival != "")
plot_flights(flightpath)
average_co2_17_20 <- amm %>% group_by(year) %>% mean()
average_co2_17_20 <- amm %>% group_by(YEAR) %>% mean()
average_co2_17_20 <- amm %>% group_by(YEAR) %>% mean(mean = mean(EMISSIONS_KGCO2EQ))
average_co2_17_20 <- amm %>% group_by(YEAR) %>% mutate(mean = mean(EMISSIONS_KGCO2EQ))
View(average_co2_17_20)
average_co2_17_20 <- amm %>% group_by(YEAR) %>% mean(EMISSIONS_KGCO2EQ)
average_co2_17_20 <- amm %>% group_by(YEAR) %>% summarise(mean = mean(EMISSIONS_KGCO2EQ))
View(average_co2_17_20)
average_co2_17_20 <- amm %>% group_by(YEAR) %>% summarize(mean = mean(EMISSIONS_KGCO2EQ))
